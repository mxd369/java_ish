=============================Array-1
==============Array-1 > firstLast6 

Given an array of ints,
return true if 6 appears as either the first or last element in the array.
The array will be length 1 or more.

firstLast6([1, 2, 6]) → true
firstLast6([6, 1, 2, 3]) → true
firstLast6([13, 6, 1, 2, 3]) → false


public boolean firstLast6(int[] nums) {
	return nums[0] == 6 || nums[nums.length-1] == 6;
}

Hint:
The first element is nums[0] and the last element is nums[nums.length - 1]. Check if either of those is == 6.

Expected	Run		
firstLast6([1, 2, 6]) 			→ true	true	OK	
firstLast6([6, 1, 2, 3]) 		→ true	true	OK	
firstLast6([13, 6, 1, 2, 3])	→ false	false	OK	
firstLast6([13, 6, 1, 2, 6]) 	→ true	true	OK	
firstLast6([3, 2, 1]) 			→ false	false	OK	
firstLast6([3, 6, 1]) 			→ false	false	OK	
firstLast6([3, 6]) 				→ true	true	OK	
firstLast6([6]) 				→ true	true	OK	
firstLast6([3]) 				→ false	false	OK	
firstLast6([5, 6]) 				→ true	true	OK	
firstLast6([5, 5]) 				→ false	false	OK	
firstLast6([1, 2, 3, 4, 6]) 	→ true	true	OK	
firstLast6([1, 2, 3, 4]) 		→ false	false	OK	
other tests
OK



Our Solution:

public boolean firstLast6(int[] nums) {
  if (nums[0] == 6) {
    return true;
  }
  if (nums[nums.length - 1] == 6) {
    return true;
  }
  return false;
  
  // Solution notes: check the first and last elements, returning true
  // if they are == 6. we are given that the array is at least length 1,
  // so we don't need to check the length before using [].
  // A solution can be written very compactly with || as just
  // return(nums[0] == 6 || nums[nums.length - 1] == 6);
}

==============Array-1 > sameFirstLast 

Given an array of ints, return true if the array is length 1 or more, and the first element and the last element are equal.

sameFirstLast([1, 2, 3]) → false
sameFirstLast([1, 2, 3, 1]) → true
sameFirstLast([1, 2, 1]) → true


Hint:
The length is nums.length, the first element is nums[0] and the last element is nums[nums.length - 1]


public boolean sameFirstLast(int[] nums) {
  return (nums.length>=1) && (nums[0] == nums[nums.length-1]);
}


Expected	Run		
sameFirstLast([1, 2, 3]) 			→ false	false	OK	
sameFirstLast([1, 2, 3, 1]) 		→ true	true	OK	
sameFirstLast([1, 2, 1]) 			→ true	true	OK	
sameFirstLast([7]) 					→ true	true	OK	
sameFirstLast([]) 					→ false	false	OK	
sameFirstLast([1, 2, 3, 4, 5, 1]) 	→ true	true	OK	
sameFirstLast([1, 2, 3, 4, 5, 13]) 	→ false	false	OK	
sameFirstLast([13, 2, 3, 4, 5, 13]) → true	true	OK	
sameFirstLast([7, 7]) 				→ true	true	OK	
other tests
OK

Our Solution:

public boolean sameFirstLast(int[] nums) {
  return (nums.length >= 1 && nums[0] == nums[nums.length - 1]);
   
  // Solution notes: this is basically a direct translation of the problem
  // statement. The length check needs to come first, so we don't get an
  // error in the case that the length is 0.
}

==============Array-1 > makePi 

Return an int array length 3 containing the first 3 digits of pi, {3, 1, 4}.

makePi() → [3, 1, 4]

public int[] makePi(){
	int[] pi = {3,1,4};
	return pi;
}

Expected	Run		
makePi() → [3, 1, 4]	[3, 1, 4]	OK
==============Array-1 > commonEnd 

Given 2 arrays of ints, a and b,
return true if they have the same first element or they have the same last element.
Both arrays will be length 1 or more.

commonEnd([1, 2, 3], [7, 3]) 	→ true
commonEnd([1, 2, 3], [7, 3, 2]) → false
commonEnd([1, 2, 3], [1, 3]) 	→ true

public boolean commonEnd(int[] a, int[] b)
{
	return a[0] == b[0] || a[a.length-1] == b[b.length-1];
}

Expected	Run		
commonEnd([1, 2, 3], [7, 3]) 	→ true	true	OK	
commonEnd([1, 2, 3], [7, 3, 2]) → false	false	OK	
commonEnd([1, 2, 3], [1, 3]) 	→ true	true	OK	
commonEnd([1, 2, 3], [1]) 		→ true	true	OK	
commonEnd([1, 2, 3], [2])		→ false	false	OK	
other tests
OK	

==============Array-1 > sum3 

Given an array of ints length 3, return the sum of all the elements.

sum3([1, 2, 3]) 	→ 6
sum3([5, 11, 2]) 	→ 18
sum3([7, 0, 0]) 	→ 7

public int sum3(int[] nums)
{
	return num[0] + num[1] + num[2];
}

Expected	Run		
sum3([1, 2, 3]) 	→ 6		6	OK	
sum3([5, 11, 2]) 	→ 18	18	OK	
sum3([7, 0, 0]) 	→ 7		7	OK	
sum3([1, 2, 1]) 	→ 4		4	OK	
sum3([1, 1, 1]) 	→ 3		3	OK	
sum3([2, 7, 2]) 	→ 11	11	OK	
==============Array-1 > rotateLeft3 

Given an array of ints length 3,
return an array with the elements "rotated left" so {1, 2, 3} yields {2, 3, 1}.

rotateLeft3([1, 2, 3]) 	→ [2, 3, 1]
rotateLeft3([5, 11, 9]) → [11, 9, 5]
rotateLeft3([7, 0, 0]) 	→ [0, 0, 7]


public int[] rotateLeft3(int[] nums)
{
	int[] left = {nums[1],nums[2],nums[0]};
	return left;
}

Expected	Run		
rotateLeft3([1, 2, 3])  → [2, 3, 1]	[2, 3, 1]		OK	
rotateLeft3([5, 11, 9]) → [11, 9, 5]	[11, 9, 5]	OK	
rotateLeft3([7, 0, 0])  → [0, 0, 7]	[0, 0, 7]		OK	
rotateLeft3([1, 2, 1])  → [2, 1, 1]	[2, 1, 1]		OK	
rotateLeft3([0, 0, 1])  → [0, 1, 0]	[0, 1, 0]		OK	
other tests
OK	
==============
==============
==============
==============
==============
==============
==============
==============
==============
==============
==============
==============